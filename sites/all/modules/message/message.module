<?php
// $Id: message.module,v 1.297.2.3 2008/05/19 07:27:35 goba Exp $

/**
 * @file
 * Enables keeping an easily and regularly updated web page or a message.
 */

/**
 * Implementation of hook_node_info().
 */
function message_node_info() {
  return array(
    'message' => array(
      'name' => t('message entry'),
      'module' => 'message',
      'description' => t('A <em>message entry</em> is a single post to an online journal, or <em>message</em>.'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function message_perm() {
  return array('create message entries', 'delete own message entries', 'delete any message entry', 'edit own message entries', 'edit any message entry');
}

/**
 * Implementation of hook_access().
 */
function message_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      // Anonymous users cannot post even if they have the permission. 
      return user_access('create message entries', $account) && $account->uid ? TRUE : NULL;
    case 'update':
      return user_access('edit any message entry', $account) || (user_access('edit own message entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
    case 'delete':
      return user_access('delete any message entry', $account) || (user_access('delete own message entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}

/**
 * Implementation of hook_user().
 */
function message_user($type, &$edit, &$user) {
  if ($type == 'view' && user_access('create message entries', $user)) {
    $user->content['summary']['message'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('message'),
      '#value' => l(t('View recent message entries'), "message/$user->uid", array('attributes' => array('title' => t("Read @username's latest message entries.", array('@username' => $user->name))))),
      '#attributes' => array('class' => 'message'),
    );
  }
}

/**
 * Implementation of hook_help().
 */
function message_help($path, $arg) {
  switch ($path) {
    case 'admin/help#message':
      $output = '<p>'. t('The message module allows registered users to maintain an online journal, or <em>message</em>. messages are made up of individual <em>message entries</em>, and the message entries are most often displayed in descending order by creation time.') .'</p>';
      $output .= '<p>'. t('There is an (optional) <em>messages</em> menu item added to the Navigation menu, which displays all messages available on your site, and a <em>My message</em> item displaying the current user\'s message entries. The <em>message entry</em> menu item under <em>Create content</em> allows new message entries to be created.') .'</p>';
      $output .= '<p>'. t('Each message entry is displayed with an automatic link to other messages created by the same user. By default, message entries have comments enabled and are automatically promoted to the site front page. The message module also creates a <em>Recent message posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';
      $output .= '<p>'. t('When using the aggregator module an automatic <em>message it</em> icon is displayed next to the items in a feed\'s <em>latest items</em> block. Clicking this icon populates a <em>message entry</em> with a title (the title of the feed item) and body (a link to the source item on its original site and illustrative content suitable for use in a block quote). message authors can use this feature to easily comment on items of interest that appear in aggregator feeds from other sites. To use this feature, be sure to <a href="@modules">enable</a> the aggregator module, <a href="@feeds">add and configure</a> a feed from another site, and <a href="@blocks">position</a> the feed\'s <em>latest items</em> block.', array('@modules' => url('admin/build/modules'), '@feeds' => url('admin/content/aggregator'), '@blocks' => url('admin/build/block'))) .'</p>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@message">message module</a>.', array('@message' => 'http://drupal.org/handbook/modules/message/')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_form().
 */
function message_form(&$node) {
  global $nid;
  $iid = isset($_GET['iid']) ? (int)$_GET['iid'] : 0;
  $type = node_get_types('type', $node);


  if (empty($node->body)) {
    // If the user clicked a "message it" link, we load the data from the
    // database and quote it in the message.
    if ($nid && $message = node_load($nid)) {
      $node->body = '<em>'. $message->body .'</em> ['. l($message->name, "node/$nid") .']';
    }

    if ($iid && $item = db_fetch_object(db_query('SELECT i.*, f.title as ftitle, f.link as flink FROM {aggregator_item} i, {aggregator_feed} f WHERE i.iid = %d AND i.fid = f.fid', $iid))) {
      $node->title = $item->title;
      // Note: $item->description has been validated on aggregation.
      $node->body = '<a href="'. check_url($item->link) .'">'. check_plain($item->title) .'</a> - <em>'. $item->description .'</em> [<a href="'. check_url($item->flink) .'">'. check_plain($item->ftitle) ."</a>]\n";
    }

  }

  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#required' => TRUE, '#default_value' => !empty($node->title) ? $node->title : NULL, '#weight' => -5);
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  return $form;
}

/**
 * Implementation of hook_view().
 */
function message_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    // Breadcrumb navigation
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('messages'), 'message'), l(t("@name's message", array('@name' => $node->name)), 'message/'. $node->uid)));
  }
  return node_prepare($node, $teaser);
}

/**
 * Implementation of hook_link().
 */
function message_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && $node->type == 'message') {
    if (arg(0) != 'message' || arg(1) != $node->uid) {
      $links['message_usernames_message'] = array(
        'title' => t("@username's message", array('@username' => $node->name)),
        'href' => "message/$node->uid",
        'attributes' => array('title' => t("Read @username's latest message entries.", array('@username' => $node->name)))
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_menu().
 */
function message_menu() {
  $items['message'] = array(
    'title' => 'messages',
    'page callback' => 'message_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'message.pages.inc',
  );
  $items['message/%user_uid_optional'] = array(
    'title' => 'My message',
    'page callback' => 'message_page_user',
    'page arguments' => array(1),
    'access callback' => 'message_page_user_access',
    'access arguments' => array(1),
    'file' => 'message.pages.inc',
  );
  $items['message/%user/feed'] = array(
    'title' => 'messages',
    'page callback' => 'message_feed_user',
    'page arguments' => array(1),
    'access callback' => 'message_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'message.pages.inc',
  );
  $items['message/feed'] = array(
    'title' => 'messages',
    'page callback' => 'message_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'message.pages.inc',
  );

  return $items;
}

/**
 * Access callback for user message pages.
 */
function message_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a message to 'exist' the user must either be able to
  // create new message entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create message entries', $account) || _message_post_exists($account));
}

/**
 * Helper function to determine if a user has message posts already.
 */
function _message_post_exists($account) {
  return (bool)db_result(db_query_range(db_rewrite_sql("SELECT 1 FROM {node} n WHERE n.type = 'message' AND n.uid = %d AND n.status = 1"), $account->uid, 0, 1));
}

/**
 * Implementation of hook_block().
 *
 * Displays the most recent 10 message titles.
 */
function message_block($op = 'list', $delta = 0) {
  global $user;
  if ($op == 'list') {
    $block[0]['info'] = t('Recent message posts');
    return $block;
  }
  else if ($op == 'view') {
    if (user_access('access content')) {
      $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.created FROM {node} n WHERE n.type = 'message' AND n.status = 1 ORDER BY n.created DESC"), 0, 10);
      if ($node_title_list = node_title_list($result)) {
        $block['content'] = $node_title_list;
        $block['content'] .= theme('more_link', url('message'), t('Read the latest message entries.'));
        $block['subject'] = t('Recent message posts');
        return $block;
      }
    }
  }
}

