<?php

/**
 * Implementation of hook_menu().
 */

function noti_menu(){

  $items['user/%user/notify'] = array(
    'title' => 'Email settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('noti_user_settings_form', 1),
    'access callback' => 'user_access',
    'access arguments' => array('access noti'),
    'type' => MENU_LOCAL_TASK
  );

  $items['user/%user/my_groups'] = array(
    'title' => 'My groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('noti_user_page', 1),
    'access callback' => 'user_access',
    'access arguments' => array('access noti'),
    'type' => MENU_LOCAL_TASK
  );

 return $items;


}

/**
 * Implementation of hook_perm().
 */
function noti_perm() {
  return array('access noti', 'administer noti');
}


/**
 * Menu callback; show user notification options.
 */
function noti_user_settings_form(&$form_state, $arg) {
//function noti_user($op, &$edit, &$account, $category = NULL){
//	  if ($op == 'form') {
	 global $user;
	  if ($user->uid != $arg->uid && $user->uid != 1) {
	    drupal_access_denied();
	    return;
	  }
	  
	 $account = user_load(array('uid' => $arg->uid));
	  if (!is_object($account)) {
	    drupal_not_found();
	    return;
	  }

	  $result = noti_global_query();
	  $notify = db_fetch_object($result);
	  $send = '1';
	  //////dsm($notify);
	  $form = array();
	  if (!$notify->mail) {
		drupal_set_message(t('Your e-mail address must be specified on your <a href="@url">my account</a> page.', array('@url' => url('user/'. $account->uid .'/edit'))), 'error');
	  }
	  $form['notify_page_master'] = array('#type' => 'fieldset', '#title' => 'Main notification settings');
	  $form['notify_page_master']['status'] = array('#type' => 'radios',
	    '#title' => 'Notify status',
	    '#default_value' => $notify->status,
	    '#options' =>  array(t('I don\'t want to receive an email when someone posts, I will check for new messsages on my own'), t('I want to receive an email when someone sends a post to one of my groups')),
	    '#description' => t('Group notifications can also be ' .l('customized','user/'.$user->uid.'/my_groups'). ' in greater detail if required.'),
	  );
	  
	  $form['uid'] = array('#type' => 'value', '#value' => $account->uid);
	  $form['submit'] = array('#type' => 'submit', '#value' => t('Save settings'));



	
	  return $form;

}


function noti_user_page($form_state, $account = NULL) {
	global $user;
	global $base_url;
	//////dsm($user->og_groups);
	$account = $account ? $account : $user;
	//////dsm($user->uid);
	$group_result = db_query('SELECT * FROM {noti_groups} WHERE uid = %d ',$user->uid);
	$notification_prefs = array();
	$immediate = '0';
	while($v4 = db_fetch_object($group_result)){
		$notification_prefs[$v4->gid] = $v4->send_interval;
	}
	//////dsm($notification_prefs);
	if (!empty($user->og_groups)) {
		$ngroups = $account->og_groups;
		foreach ($user->og_groups as $gid => $group) {
			$group_index = $gid;
			$group_users = get_users_by_gid($gid);
			//dsm($group_users);
			$view_members_digit = count($group_users);
			//dsm($view_members);
			$view_members = '<h3><strong>View members for this group:  <a href="'.$base_url.'/og/users/'.$gid.'/faces">'.$view_members_digit.'</a></strong></h3>';

			// noti prefs for this user this group
			// 0 Immediately, 1 Hourly, 2 Daily, 3 Weekly
			$notification_prefs_value = $notification_prefs[$gid];
			$form[$group_index] = array(
				'#tree' => TRUE,
				'#type' => 'fieldset',
				'#title' => '<a href="'.$base_url.'/node/'.$gid.'">'.$group['title'].'</a>',
				'#collapsible' => FALSE,
				'#description' => $view_members,
				//'#collapsed' => !isset($ngroups[$gid]) && empty($ngrouptypes[$gid])
			);
			$form[$group_index][$gid] = array(
				'#type' => 'radios',
				'#title' => ' Send messages for this group',
				//'#default_value' => variable_get($nofitication_prefs),
				'#default_value' => $notification_prefs_value,
				'#options' =>  array(t('Immediately'), t('Hourly'),t('Daily'),t('Weekly'),t('Never')),
				'#description' => t('<a href="'.$base_url. '/og/unsubscribe/'.$gid.'/'.$user->uid.'?destination=user/'.$user->uid.'/my_groups">Leave group</a>'),
			);
			$form[$group_index]['gid'] = array('#type' => 'value', '#value' => $gid);
		}
		$form['uid'] = array('#type' => 'value', '#value' => $account->uid);
		$form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
	}
	else {
		$form = array();
		drupal_set_message(t('There are no active group subscriptions available.'));
	}
	return $form;
}

//function noti_user_settings_form_submit($form, &$form_state) {
function noti_user_settings_form_submit($form, &$form_state) {
  unset($form);
	  $groups_array = array();
	  $groups_query = db_query('SELECT * FROM {noti_groups} WHERE uid=%d',$form_state['values']['uid']);
	  while($groups_result = db_fetch_array($groups_query)){

		$groups_array[] = $groups_result;


	  }

  //$uid = $form_state['values']['uid'];
	if($form_state['values']['status'] == '1'){
		foreach($groups_array as $groups_value1){
		
		  db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', '0', $groups_value1['gid'], $groups_value1['uid']);

		



		}

	  /*db_query('REPLACE INTO {noti} (uid,status) VALUES (%d,%d)', $form_state['values']['uid'],$form_state['values']['status']);
	  drupal_set_message(t('Notify settings saved.'));*/
	}elseif($form_state['values']['status'] == '0'){
		foreach($groups_array as $groups_value0){
		
		  db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', '4', $groups_value0['gid'], $groups_value0['uid']);

		



		}
	}		  
	  db_query('REPLACE INTO {noti} (uid,status) VALUES (%d,%d)', $form_state['values']['uid'],$form_state['values']['status']);
	  drupal_set_message(t('Notify settings saved.'));

}

function noti_user_page_submit($form, &$form_state) {
	//////dsm($form);
	unset($form);
	//////dsm($form_state['values']);
	$uid = $form_state['values']['uid'];
	$values = array();
	foreach ($form_state['values'] as $key => $values) {
		if($key!='uid' && $key!='op' && $key!='submit' && $key!='form_build_id' && $key!='form_token' && $key!='form_id') {
			$gid = $values['gid'];
			$send_interval = $values[$gid];
			if ($send_interval!="") {
				db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', $send_interval, $gid, $uid);
			}
		}
	}
	drupal_set_message(t('Notify group settings saved.'));
}


function noti_form_alter(&$form, $form_state, $form_id){



	 switch ($form_id) {

	
		case 'og_confirm_subscribe':

 		$form['#submit'][] = 'noti_subscribe_submit_handler';

		break;

		case 'og_confirm_unsubscribe':

 		$form['#submit'][] = 'noti_unsubscribe_submit_handler';

		break;



	} 







}



function noti_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
//When group is created, set creator's {noti_groups} setting to "0"

	switch($op){

		case 'insert':

			if($node->type == 'group'){

			
				db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', "0", $node->nid, $node->uid);
			}
		break;

		case 'delete':

			if($node->type == 'group'){

			
				db_query('DELETE FROM {noti_groups} WHERE uid=%d', $node->uid);
			}
		break;

	}



//When group is deleted, remove from {noti_groups} ALL where gid = this group gid




}








function noti_subscribe_submit_handler($form,&$form_state){

	////print_r('I Work');
	////print_r($form_state);
	$gid = $form_state['values']['gid'];
	$uid = $form_state['values']['account']->uid;
	////print_r($gid);
	////print_r($uid);
	db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', '0', $gid, $uid);


}

function noti_unsubscribe_submit_handler($form,&$form_state){

	////print_r('I Work!');
	////print_r($form_state);
	$gid = $form_state['values']['group_node']->nid;
	$uid = $form_state['values']['account']->uid;
	////print_r($gid);
	////print_r($uid);
	db_query('DELETE FROM {noti_groups} where gid=%d AND uid=%d', $gid, $uid);

}

function noti_global_query(){
  global $user;

  $account = user_load(array('uid' => $user->uid));

  $result = db_query('SELECT u.uid, u.name, u.mail, n.status FROM {users} u LEFT JOIN {noti} n ON u.uid = n.uid WHERE u.uid = %d', $account->uid);
  return $result;

}

function noti_user($op, &$edit, &$account, $category = NULL){

	switch($op){
		
		case 'insert':
		
		db_query('REPLACE INTO {noti} (uid,status) VALUES (%d,%d)', $account->uid,'1');
		$default = '0';

		$mandatory_query = variable_get('og_mandatory_group',$default);
		db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', $default, $mandatory_query,$account->uid);

		////print_r($mandatory_query);
		////print_r($edit);
		foreach($edit['og_register'] as  $key => $og_reg_value){
			////print_r($og_reg_value);
			if($key == $og_reg_value){
			db_query('REPLACE INTO {noti_groups} (send_interval,gid,uid) VALUES (%d,%d,%d)', $default, $og_reg_value,$account->uid);

			}
			
			
		}

		break;
		
		case 'delete':
		
		db_query('DELETE FROM {noti} WHERE uid=%d', $account->uid);
		db_query('DELETE FROM {noti_groups} WHERE uid=%d', $account->uid);
		

		
		break;

		/*case 'after_update':

		
		break;*/

	}
	


}


function noti_send_query(){
 
 $result = db_query('SELECT * FROM {noti}');
  return $result;

}



// --------------------------------------------------------------- 
// start cron and variable-setting functions
// --------------------------------------------------------------- 
/**
* Implementation of hook_cron
*/
function noti_cron(){
	$the_interval_we_are_doing_now = "";
	// Immediately, Hourly, Daily, Weekly
		// "Immediately" runs on the 5 minute, every 5 minutes
		// "Hourly" runs 17 minutes past the hour, every hour
		// "Daily" runs at 3:08 a.m., daily
		// "Weekly runs Sunday at 2:12 a.m., every week
	$day = date("D");
	$hour = date("g");
	$twentyfourhour = date("G");
	$minute = date("i");
	$ampm = date("a");
	//////dsm(t($day . " " . $hour . ":" . $minute . " ". $ampm ));
	$example = mktime(date("g"). date("i"), date("m"), date("d"), date("y"));
	$localtime = date("m/d/y H:i:s",time() - 604800);
	//////dsm(get_nids_since("last week"));
	//////dsm(get_nids_since("today"));
	//////dsm(get_nids_since("last hour"));
	//////dsm(get_nids_since("last five minutes"));


	// if $minute is 00, 05, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
	// then run immediately
	if (preg_match("/^[0-5]0$/",$minute) || preg_match("/^[0-5]5$/",$minute)) {
		noti_doing_now('Immediately');
	}
	// if $hour is 1-12 
	// then run hourly
	if(preg_match("/^([0-9]?[0-9])$/",$hour) && $minute == '00'){
		noti_doing_now('Hourly');
	}
	// if $hour is 3 and $minute is 00 and $ampm is am
	// then run daily
	if($hour == '8' &&  $minute == '00' && $ampm == 'am'){
		noti_doing_now('Daily');
	}	
/*	if($hour == '5' &&  $minute == '38'&& $ampm == 'pm'){
		//noti_doing_now('Daily');
 		dsm('I am working');
	}*/	

	// if $day = "Sun" and $hour is 2 and $minute is 00 and $ampm is am
	// then run weekly
	if($day == 'Sun' && $hour == '7' && $minute == '00' && $ampm == 'am' ){
		noti_doing_now('Weekly');
	}


	//noti_doing_now('Immediately');
	// for testing ONLY
	//noti_doing_now('Daily');
	
	//noti_send('immediate');
	//dsm($example);
}

//the interval we are doing when cron runs, used by hook_cron 
function noti_doing_now($the_interval_we_are_doing_now){
	////dsm("Running Cron: ");
	////dsm($the_interval_we_are_doing_now);
	$message_queue_ready = TRUE;
	switch($the_interval_we_are_doing_now){
		case "Immediately":
			//get nodes			
			$nids_array = get_nids_since('last five minutes');
			create_node_message_queue($nids_array);
			//get comments			
			$cids_array = get_cids_since('last five minutes');
			////dsm($cids_array);
			create_comment_message_queue($cids_array);
			send_individual_messages();
			break;
		case "Hourly":
			//get nodes			
			$nids_array = get_nids_since('last hour');
			create_node_message_queue($nids_array);
			//get comments			
			$cids_array = get_cids_since('last hour');
			create_comment_message_queue($cids_array);
			send_digest_messages('hourly');
			break;
		case "Daily":
			//get nodes			
			$nids_array = get_nids_since('today');
			create_node_message_queue($nids_array);
			//get comments			
			$cids_array = get_cids_since('today');
			create_comment_message_queue($cids_array);
			send_digest_messages('daily');
			break;
		case "Weekly":
			//get nodes			
			$nids_array = get_nids_since('last week');
			create_node_message_queue($nids_array);
			//get comments			
			$cids_array = get_cids_since('last week');
			create_comment_message_queue($cids_array);
			send_digest_messages('weekly');
			break;
	}
}

	// --------------------------------------------------------------- 
	// retrieve nodes and comments id based on time interval
	// --------------------------------------------------------------- 

function get_nids_since($interval){
	switch($interval){
		case "last five minutes":
			$node_five = array();
			$comment_five = array();
			$five = time() - 300;
	        $node_query = db_query('SELECT nid FROM {node} WHERE created > %d', $five);
			while($nodes = db_fetch_array($node_query)){
				$node_five[] = $nodes;
			}
			return $node_five;
			break;
		case "last hour":
			$node_hour = array();
			$comment_hour = array();
			$last_hour = time() - 3600;
	        $node_query = db_query('SELECT nid FROM {node} WHERE created > %d', $last_hour);
			while($nodes = db_fetch_array($node_query)){
				$node_hour[] = $nodes;
			}
			return $node_hour; 
			break;
		case "today":
			$node_day = array();
			$comment_day = array();
			$today = time() - 86400;
			$node_query = db_query('SELECT nid FROM {node} WHERE created > %d', $today);
			while($nodes = db_fetch_array($node_query)){
				$node_day[] = $nodes;
			}
			return $node_day; 
			break;
		case "last week":
			$node_week = array();
			$comment_week = array();
			$one_week = time() - 604800;
	        $node_query = db_query('SELECT nid FROM {node} WHERE created > %d', $one_week);
			while($nodes = db_fetch_array($node_query)){
				$node_week[] = $nodes;
			}
			return $node_week; 
			break;
	}
}

function get_cids_since($interval){
	switch($interval){
		case "last five minutes":
			$comment_five = array();
			$five = time() - 300;
			$comment_query = db_query('SELECT cid FROM {comments} WHERE timestamp > %d', $five);
			while($comments = db_fetch_array($comment_query)){
				$comment_five[] = $comments;
			}
			////dsm($comment_five);
			return $comment_five;
			break;
		case "last hour":
			$comment_hour = array();
			$last_hour = time() - 3600;
			$comment_query = db_query('SELECT cid FROM {comments} WHERE timestamp > %d', $last_hour);
			while($comments = db_fetch_array($comment_query)){
				$comment_hour[] = $comments;
			}
			return $comment_hour; 
			break;
		case "today":
			$comment_day = array();
			$today = time() - 86400;
			$comment_query = db_query('SELECT cid FROM {comments} WHERE timestamp > %d', $today);
			while($comments = db_fetch_array($comment_query)){
				$comment_day[] = $comments;
			}
			return $comment_day; 
			break;
		case "last week":
			$comment_week = array();
			$one_week = time() - 604800;
			$comment_query = db_query('SELECT cid FROM {comments} WHERE timestamp > %d', $one_week);
			while($comments = db_fetch_array($comment_query)){
				$comment_week[] = $comments;
			}
			return $comment_week; 
			break;
	}
}

// --------------------------------------------------------------- 
// start message queueing functions
// --------------------------------------------------------------- 
function create_node_message_queue($nids_array){
	// ////dsm($nids_array);
	$gids_array = array();
	foreach($nids_array as $key => $nid_array){
		$gids_array[$nid_array['nid']] = array();
		$gids_array[$nid_array['nid']] = get_gids_by_nid($nid_array['nid']);
		////////dsm($gids_array[$nid['nid']]);
		foreach ($gids_array as $nid_key => $value) {
			$nid = $nid_key;
			if (is_array($value)){
				$users = array();
				foreach($value as $array_key => $array_data){
					$gid = $array_data['group_nid'];
					$users[$gid] = array();
					$users[$gid] = get_users_by_gid($gid);
					//////dsm('gid '. $gid);
					foreach ($users[$gid] as $user_array => $user_data){
						//////dsm($user_data);
						if(is_array($user_data)){
							$uid = $user_data['uid'];
						}else{
							$uid = $user_data;
						}						
						$notification_preference = get_notification_preference_by_uid_and_gid($uid, $gid);
						//////dsm($nid);
						//////dsm($notification_preference); 
						$notification_preference = get_notification_preference_by_uid_and_gid($uid, $gid);

						//$status_setting = get_status_by_uid($uid); //get status from noti table
					//if($status_setting == '1'){ 
 
						if ($notification_preference['send_interval'] == '0'){
							$already_queued = db_query('SELECT * FROM {noti_immediate_cue} WHERE uid=%d AND NID=%d', $uid,$nid);
							// 1) check to see if message is NOT already queued
							$row = db_fetch_array($already_queued);
							$already_sent = db_query('SELECT * FROM {noti_sent} WHERE uid=%d AND NID=%d', $uid,$nid);
							$sent = db_fetch_array($already_sent);
							if(empty($row)&&empty($sent)) {
								// add message to individual message queue table in DB
								db_query('INSERT INTO {noti_immediate_cue} (uid,nid,gid) VALUES (%d,%d,%d)', $uid,$nid,$gid);
							}elseif(!empty($sent)){
								db_query('DELETE FROM {noti_immediate_cue} WHERE nid = %d AND uid = %d',$nid,$uid);
							}

						} elseif ($notification_preference['send_interval'] == '1' || $notification_preference['send_interval'] == '2' || $notification_preference['send_interval'] == '3'){				
							$already_queued = db_query('SELECT * FROM {noti_digest_cue} WHERE uid=%d AND nid=%d', $uid,$nid);
							// 1) check to see if message is NOT already queued
							$row = db_fetch_array($already_queued);
							$already_sent = db_query('SELECT * FROM {noti_sent} WHERE uid=%d AND nid=%d', $uid,$nid);
							$sent = db_fetch_array($already_sent);
							if(empty($row)&&empty($sent)) {
								// add message to individual message queue table in DB
								db_query('INSERT INTO {noti_digest_cue} (uid,nid,gid) VALUES (%d,%d,%d)', $uid,$nid,$gid);
							}elseif(!empty($sent)){
								db_query('DELETE FROM {noti_digest_cue} WHERE nid = %d AND uid = %d',$nid,$uid);
							}
						}elseif($notification_preference['send_interval'] == '4'){
							
								db_query('DELETE FROM {noti_digest_cue} WHERE nid = %d AND uid = %d',$nid,$uid);
								db_query('DELETE FROM {noti_immediate_cue} WHERE nid = %d AND uid = %d',$nid,$uid);
							
							
						

						}
					//}	

					}
				}
			}
		}
	}
}

function create_comment_message_queue($cids_array){
	//////dsm($cids_array);

	$gids_array = array();
	foreach($cids_array as $cid_key => $cid_array){
		$cid = $cid_array['cid'];
			//get the nid
				$comment_obj = _comment_load($cid_array['cid']);
				$nid = $comment_obj->nid;	
				$gids_array = get_gids_by_nid($nid);
				////dsm($gids_array);
				//////dsm($cid . ' cid');
		//}
		foreach ($gids_array as $gid_key => $value) {
			//////dsm($value);
			$gids[] = $value['group_nid'];
			//$gid = $gid_key;
			$gid = $value['group_nid'];
			//////dsm($gids);
			if (is_array($value)){
				$users = array();
				foreach($gids as $array_key => $array_data){
					////dsm($array_data . ' array_data');
					$users[$array_data] = array();
					$users[$array_data] = get_users_by_gid($gid);
					//////dsm($users . 'hello');
					foreach ($users[$array_data] as $user_array => $user_data){
						////dsm($user_data);
						if(is_array($user_data)){
							$uid = $user_data;
						}else{
							$uid = $user_data;
						}
						////dsm($uid . ' uid');
						////dsm($gid . ' gid');						
						$notification_preference = get_notification_preference_by_uid_and_gid($uid, $gid);
						//////dsm($cid);
						//////dsm($notification_preference . 'notification_preference'); 
						//$status_setting = get_status_by_uid($uid); //get status from noti table
					//if($status_setting == '1'){ 
						if ($notification_preference['send_interval'] == '0'){
							$already_queued = db_query('SELECT * FROM {noti_immediate_cue} WHERE uid=%d AND cid=%d', $uid,$cid);
							// 1) check to see if message is NOT already queued
							$row = db_fetch_array($already_queued);
							$already_sent = db_query('SELECT * FROM {noti_sent} WHERE uid=%d AND cid=%d', $uid,$cid);
							$sent = db_fetch_array($already_sent);
							if(empty($row)&&empty($sent)) {
								// add message to individual message queue table in DB
								db_query('INSERT INTO {noti_immediate_cue} (uid,cid,gid) VALUES (%d,%d,%d)', $uid,$cid,$gid);
							}elseif(!empty($sent)){
								db_query('DELETE FROM {noti_immediate_cue} WHERE cid = %d AND uid = %d',$cid,$uid);
							}
						} elseif ($notification_preference['send_interval'] == '1' || $notification_preference['send_interval'] == '2' || $notification_preference['send_interval'] == '3'){
							$already_queued = db_query('SELECT * FROM {noti_digest_cue} WHERE uid=%d AND cid=%d', $uid,$cid);
							// 1) check to see if message is NOT already queued
							$row = db_fetch_array($already_queued);
							$already_sent = db_query('SELECT * FROM {noti_sent} WHERE uid=%d AND cid=%d', $uid,$cid);
							$sent = db_fetch_array($already_sent);
							if(empty($row)&&empty($sent)) {
								// add message to individual message queue table in DB
								db_query('INSERT INTO {noti_digest_cue} (uid,cid,gid) VALUES (%d,%d,%d)', $uid,$cid,$gid);
							}elseif(!empty($sent)){
								db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$cid,$uid);
							}
						}elseif($notification_preference['send_interval'] == '4'){
							
								db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$cid,$uid);
								db_query('DELETE FROM {noti_immediate_cue} WHERE cid = %d AND uid = %d',$cid,$uid);
							
							
						}
					//}	

					}
				}
			}
		}
	}
}

function get_gids_by_nid($nid){
	$nodes = array();
	$query = db_query('SELECT oga.nid,oga.group_nid FROM {node} n INNER JOIN {og_ancestry} oga ON n.nid = oga.group_nid WHERE oga.nid = %d',$nid); 
	while($row = db_fetch_array($query)){
		$result_array[] = $row;
	}
	return $result_array;
}

function get_users_by_gid($gid){
	$users = noti_get_all_subscribers($gid);
	return $users;
}

function noti_get_all_subscribers($gid) {
      $sql = og_list_users_sql($min_is_active =1, $min_is_admin = 0);
      $result = db_query($sql, $gid);
      while ($row = db_fetch_array($result)) {
        $users[$row['uid']] = $row['uid'];
      }
      return $users;
}

function get_notification_preference_by_uid_and_gid($uid, $gid){
	$query = db_query('SELECT uid,gid,send_interval FROM lfcnoti_groups where uid = %d AND gid = %d',$uid,$gid); 
	$result = db_fetch_array($query);
	//////dsm($result);
	return $result;
}	

function get_status_by_uid($uid){

	$status_query = db_query('SELECT status FROM {noti} WHERE uid = %d',$uid);

	$status_result = db_fetch_array($status_query);

	return $status_result;


}
// --------------------------------------------------------------- 
// end message queueing functions
// --------------------------------------------------------------- 

// --------------------------------------------------------------- 
// start message processing functions
// --------------------------------------------------------------- 
function send_individual_messages(){

$query = db_query('SELECT * FROM {noti_immediate_cue}');
	while($result = db_fetch_array($query)){

		$message_cue[] = $result;
	}

/*$sent_query = db_query('SELECT * FROM {noti_sent_immediate}');

	while($sent_result = db_fetch_array($sent_query)){

		$message_hold[] = $sent_result;
	}*/
////dsm($message_cue);


	foreach($message_cue as $key => $message_data){
		
	

				/*$sent_query = db_query('SELECT * FROM {noti_sent_immediate}');

				$sent_result = db_fetch_array($sent_query);*/

				$sent_query = db_query('SELECT * FROM {noti_sent}');

					while($sent_result = db_fetch_array($sent_query)){

						$sent_data[] = $sent_result;
					}



	
				////dsm($message_data);
				////dsm($message_data['cid']);
				////dsm($sent_data['nid']);
				////dsm($sent_data['uid']);
					if($message_data['nid'] == $sent_data['nid'] || $message_data['cid'] == $sent_data['cid'] && $message_data['uid'] == $sent_data['uid']){
					db_query('DELETE FROM {noti_immediate_cue} WHERE nid = d% OR cid = %d AND uid = %d',$message_data['nid'],$message_data['cid'],$message_data['uid']);

				////dsm($email);
						////dsm('message deleted');
					}

					else{ //message not yet sent
				$get_mail = user_load(array('uid' => $message_data['uid']));
				$email = $get_mail->mail;
				////dsm($email);
				$message_subject = '';
				$message_body = ''; //initialize empty variable.
			
					if(!empty($message_data['nid'])){
						global $base_url;
						$node_items = node_load(array('nid' => $message_data['nid']));
						$node_author = user_load(array('uid' => $node_items->uid));
						foreach ($node_items->og_groups_both as $key => $group_name) {}
						$message_subject = $node_items->title. ' to: ' . $group_name .' by: ' .$node_author->realname;
						$message_body .= '<p>Greetings ' . $get_mail->realname . ',</p>';//print the realname of user
						$message_body .= '<p>This is in reference to: ' .$node_items->title. ' posted to: ' . $group_name.'</p>';
						$message_body .= '<p>' .create_node_email_body($message_data['uid'],$nid = $message_data['nid']). '</p>';
						$message_body .= '<p>Read the complete message, read or add comments, and download attachments ' .$base_url. '/node/' . $node_items->nid.'</p>';
						db_query('DELETE FROM {noti_immediate_cue} WHERE nid = %d AND uid = %d',$message_data['nid'],$message_data['uid']);


						}elseif(!empty($message_data['cid'])){
						global $base_url;
						$comment_object = _comment_load($message_data['cid']);
						$comment_author = user_load(array('uid' => $comment_object->uid));
						$node_cdata = node_load(array('nid' => $comment_object->nid));
						foreach ($node_cdata->og_groups_both as $key2 => $group_comment_name) {}
						$message_subject = 'Comment on: '. $node_cdata->title. ' to: ' . $group_comment_name .' by: ' .$comment_author->realname;
						$message_body .= '<p>Greetings ' . $get_mail->realname . ',</p>';//print the realname of user
						$message_body .= '<p>Comment by ' .$comment_author->realname . ' ' . $comment_object->subject.'</p>';
						$message_body .= '<p>' .$comment_object->comment. '</p>';
						$message_body .= '<p>Read the complete message, read or add comments, and download attachments ' .$base_url. '/node/' . $comment_object->nid.'#comment-' .$comment_object->cid .'</p>';
						db_query('DELETE FROM {noti_immediate_cue} WHERE cid = %d AND uid = %d',$message_data['cid'],$message_data['uid']);


					}				

				//db_query('DELETE FROM {noti_immediate_cue} WHERE nid = %d OR cid = %d AND uid = %d',$message_data['nid'],$message_data['cid'],$message_data['uid']);
				
				noti_send('individual', $message_subject, $message_body,$email);
				$message_subject = '';//re-empty the variable after email is sent.
				$message_body = ''; //re-empty the variable after email is sent.
				
				db_query('INSERT INTO {noti_sent} (nid,cid,uid) VALUES (%d,%d,%d)',$message_data['nid'],$message_data['cid'],$message_data['uid']);
			}

	}
		
}


function create_node_email_body($uid, $nid){

	$node_obj = node_load($nid);
	// for this UID/NID
	// get any data 
	// build body
	
	// for testing
	$node_email = $node_obj->body;
	return $node_email;
}



// --------------------------------------------------------------- 
// START REDO DIGEST MESSAGE PROCESS
// --------------------------------------------------------------- 
function send_digest_messages($op){



switch($op) {

	case 'hourly':
		$status_query = db_query('SELECT * FROM {noti}');
			while($status_result = db_fetch_array($status_query)){

				$status[] = $status_result;

		
			}


		//dsm($status);
		
		
		   
		foreach($status as $key => $setting_uid){
			//dsm($setting_uid);		
			if($setting_uid['status'] == "1"){
				//dsm($setting_uid);
				$email = user_load(array('uid' => $setting_uid['uid']))->mail;
				//get everything from noti_groups table that equals 1 (hourly)
				$hourly = array();
				$send_interval_query = db_query('SELECT * FROM {noti_groups} WHERE send_interval = 1 AND uid = %d',$setting_uid['uid']);
				while($send_result = db_fetch_array($send_interval_query)){

					$hourly[] = $send_result;
				}
				//foreach entry that equals hourly get nid, cid, gid from digest cue, load into an array
				$digest_array = array();		
				foreach($hourly as $key1 => $value1){
						//dsm($value1);

					$digest_query = db_query('SELECT * FROM {noti_digest_cue} WHERE uid = %d AND gid =%d ORDER BY nid',$value1['uid'],$value1['gid']);
					//$group_refine = noti_get_all_subscribers();
					while($digest_result = db_fetch_array($digest_query)){
						
						//dsm($digest_result);
							$digest_array[] = $digest_result;
					}
				}
				///foreach ($digest_data as $key2 => $value2){

				//	$groups_array[] = get_users_by_gid($value2['gid']);
				//	if($groups_array['uid'] == $value2['uid']){
				//		$digest_array[] = $value2;
				//	}
				//} 

				//dsm($hourly);
				//dsm($digest_array);
				//foreach entry in digest_array, load the node object where it is a node, and comment object where it is a comment and add to 2 arrays

				////dsm($group_refine);
				if(!empty($digest_array)){

				$node_obj = array();
				$comment_obj = array();
				foreach($digest_array as $key3 => $value3){
					if($value3['nid']){
					$node_obj[$value3['nid']] = node_load(array('nid' => $value3['nid']));
					
					//dsm($node_obj);
					}elseif($value3['cid']){
					$comment_obj[$value3['cid']] = _comment_load($value3['cid']);

					//dsm($comment_obj);
					}


				}
				$value3 = array();
				$remaining_comments = array();
				$message_body = '';
				$message_body .= '<p>These are new messages are from groups where you chose to receive emails in a digest every hour:</p>';
				$nid_array = array();
				$node_data = array();
				$comment_data = array();
				foreach($node_obj as $node_data){
					$nid_array[] = $node_data->nid;
					////print_r($node_data->nid);
					foreach($node_data->og_groups_both as $key3 => $value3){
					}
					$message_body .= '<p>Message title: '. $node_data->title . ' posted to: ' . $value3 . ' by: ' .	user_load(array('uid' => $node_data->uid))->realname . '</p>';
					$message_body .= '<p>Read more, reply, and download attachments at: http://localfoodsystems.org/node/'. $node_data->nid . '</p>';
		
						foreach($comment_obj as $comment_data){

							if($node_data->nid == $comment_data->nid){ 
							$message_body .= '<p>Comment on: ' .node_load(array('nid' => $comment_data->nid))->title. ' posted by: ' .user_load(array('uid' => $comment_data->uid))->realname. '</p>';
							$message_body .= '<p>Read more reply, and download attachments at: http://localfoodsystems.org/node/'. $comment_data->nid . '#comment-' .$comment_data->cid . '</p>';
							db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$comment_data->cid,$setting_uid['uid']);
							db_query('INSERT INTO {noti_sent} (cid,uid) VALUES (%d,%d)',$comment_data->cid,$setting_uid['uid']);

							}

							
						}

				 	db_query('DELETE FROM {noti_digest_cue} WHERE nid = %d AND uid = %d',$node_data->nid,$setting_uid['uid']);
					db_query('INSERT INTO {noti_sent} (nid,uid) VALUES (%d,%d)',$node_data->nid,$setting_uid['uid']);
				        				     	
				

				}
						$comment_data2 = array();
						foreach($comment_obj as $comment_data2){
							////print_r($nid_array);
							////print_r($comment_data2->nid);
							//dsm($comment_data2);
							if(!in_array($comment_data2->nid,$nid_array)){ 
							
							$message_body .= '<p>Comment on: ' .node_load(array('nid' => $comment_data2->nid))->title. ' posted by: ' .user_load(array('uid' => $comment_data2->uid))->realname. '</p>';
							$message_body .= '<p>Read more reply, and download attachments at: http://localfoodsystems.org/node/'. $comment_data2->nid . '#comment-' .$comment_data2->cid . '</p>';

							db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$comment_data2->cid,$setting_uid['uid']);
							db_query('INSERT INTO {noti_sent} (cid,uid) VALUES (%d,%d)',$comment_data2->cid,$setting_uid['uid']);

							}
						}
					


				$message_body .= '<p>To change the frequency of these emailed digests or to specify the groups from which you want messages, please visit your account: http://localfoodsystems.org/user/'.$setting_uid['uid'].'/notify </p>';
				      //}//end if(in_array($setting['uid'],noti_get_all_subscribers($key3))

				noti_send('digest',$message_subject = 'Hourly Digest Notifications from Local Food Systems',$message_body,$email);
			//build message here for hourly
			
			}else{

			drupal_set_message('Nothing to do');
			}
			}//closing brace if not empty $digest_array
		$message_body = '';
		}
		break;

	case 'daily':
		$status_query = db_query('SELECT * FROM {noti}');
			while($status_result = db_fetch_array($status_query)){

				$status[] = $status_result;

		
			}


		//dsm($status);
		
		
		   
		foreach($status as $key => $setting_uid){
			//dsm($setting_uid);		
			if($setting_uid['status'] == "1"){
				//dsm($setting_uid);
				$email = user_load(array('uid' => $setting_uid['uid']))->mail;
				//get everything from noti_groups table that equals 1 (hourly)
				$hourly = array();
				$send_interval_query = db_query('SELECT * FROM {noti_groups} WHERE send_interval = 2 AND uid = %d',$setting_uid['uid']);
				while($send_result = db_fetch_array($send_interval_query)){

					$hourly[] = $send_result;
				}
				//foreach entry that equals hourly get nid, cid, gid from digest cue, load into an array
				$digest_array = array();		
				foreach($hourly as $key1 => $value1){
						//dsm($value1);

					$digest_query = db_query('SELECT * FROM {noti_digest_cue} WHERE uid = %d AND gid =%d ORDER BY nid',$value1['uid'],$value1['gid']);
					//$group_refine = noti_get_all_subscribers();
					while($digest_result = db_fetch_array($digest_query)){
						
						//dsm($digest_result);
							$digest_array[] = $digest_result;
					}
				}
				///foreach ($digest_data as $key2 => $value2){

				//	$groups_array[] = get_users_by_gid($value2['gid']);
				//	if($groups_array['uid'] == $value2['uid']){
				//		$digest_array[] = $value2;
				//	}
				//} 

				//dsm($hourly);
				//dsm($digest_array);
				//foreach entry in digest_array, load the node object where it is a node, and comment object where it is a comment and add to 2 arrays

				////dsm($group_refine);
				if(!empty($digest_array)){

				$node_obj = array();
				$comment_obj = array();
				foreach($digest_array as $key3 => $value3){
					if($value3['nid']){
					$node_obj[$value3['nid']] = node_load(array('nid' => $value3['nid']));
					
					//dsm($node_obj);
					}elseif($value3['cid']){
					$comment_obj[$value3['cid']] = _comment_load($value3['cid']);

					//dsm($comment_obj);
					}


				}
				$value3 = array();
				$remaining_comments = array();
				$message_body = '';
				$message_body .= '<p>The following are the titles of messages to groups from which you chose to receive emails in a digest, once per day:</p>';
				$nid_array = array();
				$node_data = array();
				$comment_data = array();
				foreach($node_obj as $node_data){
					$nid_array[] = $node_data->nid;
					////print_r($node_data->nid);
					foreach($node_data->og_groups_both as $key3 => $value3){
					}
					$message_body .= '<p>Message title: '. $node_data->title . ' posted to: ' . $value3 . ' by: ' .	user_load(array('uid' => $node_data->uid))->realname . '</p>';
					$message_body .= '<p>Read more, reply, and download attachments at: http://localfoodsystems.org/node/'. $node_data->nid . '</p>';
		
						foreach($comment_obj as $comment_data){

							if($node_data->nid == $comment_data->nid){ 
							$message_body .= '<p>Comment on: ' .node_load(array('nid' => $comment_data->nid))->title. ' posted by: ' .user_load(array('uid' => $comment_data->uid))->realname. '</p>';
							$message_body .= '<p>Read more reply, and download attachments at: http://localfoodsystems.org/node/'. $comment_data->nid . '#comment-' .$comment_data->cid . '</p>';
							db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$comment_data->cid,$setting_uid['uid']);
							db_query('INSERT INTO {noti_sent} (cid,uid) VALUES (%d,%d)',$comment_data->cid,$setting_uid['uid']);

							}

							
						}

				 	db_query('DELETE FROM {noti_digest_cue} WHERE nid = %d AND uid = %d',$node_data->nid,$setting_uid['uid']);
					db_query('INSERT INTO {noti_sent} (nid,uid) VALUES (%d,%d)',$node_data->nid,$setting_uid['uid']);
				        				     	
				

				}
						$comment_data2 = array();
						foreach($comment_obj as $comment_data2){
							////print_r($nid_array);
							////print_r($comment_data2->nid);
							//dsm($comment_data2);
							if(!in_array($comment_data2->nid,$nid_array)){ 
							
							$message_body .= '<p>Comment on: ' .node_load(array('nid' => $comment_data2->nid))->title. ' posted by: ' .user_load(array('uid' => $comment_data2->uid))->realname. '</p>';
							$message_body .= '<p>Read more reply, and download attachments at: http://localfoodsystems.org/node/'. $comment_data2->nid . '#comment-' .$comment_data2->cid . '</p>';

							db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$comment_data2->cid,$setting_uid['uid']);
							db_query('INSERT INTO {noti_sent} (cid,uid) VALUES (%d,%d)',$comment_data2->cid,$setting_uid['uid']);

							}
						}
					


				$message_body .= '<p>To change the frequency of these emailed digests or to specify the groups from which you want messages, please visit your account: http://localfoodsystems.org/user/'.$setting_uid['uid'].'/notify </p>';
				      //}//end if(in_array($setting['uid'],noti_get_all_subscribers($key3))

				noti_send('digest',$message_subject = 'Daily Digest Notifications from Local Food Systems',$message_body,$email);
			//build message here for hourly
			
			}else{

			drupal_set_message('Nothing to do');
			}
			}//closing brace if not empty $digest_array
		$message_body = '';
		}
		break;

	case 'weekly':
		$status_query = db_query('SELECT * FROM {noti}');
			while($status_result = db_fetch_array($status_query)){

				$status[] = $status_result;

		
			}


		//dsm($status);
		
		
		   
		foreach($status as $key => $setting_uid){
			//dsm($setting_uid);		
			if($setting_uid['status'] == "1"){
				//dsm($setting_uid);
				$email = user_load(array('uid' => $setting_uid['uid']))->mail;
				//get everything from noti_groups table that equals 1 (hourly)
				$hourly = array();
				$send_interval_query = db_query('SELECT * FROM {noti_groups} WHERE send_interval = 3 AND uid = %d',$setting_uid['uid']);
				while($send_result = db_fetch_array($send_interval_query)){

					$hourly[] = $send_result;
				}
				//foreach entry that equals hourly get nid, cid, gid from digest cue, load into an array
				$digest_array = array();		
				foreach($hourly as $key1 => $value1){
						//dsm($value1);

					$digest_query = db_query('SELECT * FROM {noti_digest_cue} WHERE uid = %d AND gid =%d ORDER BY nid',$value1['uid'],$value1['gid']);
					//$group_refine = noti_get_all_subscribers();
					while($digest_result = db_fetch_array($digest_query)){
						
						//dsm($digest_result);
							$digest_array[] = $digest_result;
					}
				}
				///foreach ($digest_data as $key2 => $value2){

				//	$groups_array[] = get_users_by_gid($value2['gid']);
				//	if($groups_array['uid'] == $value2['uid']){
				//		$digest_array[] = $value2;
				//	}
				//} 

				//dsm($hourly);
				//dsm($digest_array);
				//foreach entry in digest_array, load the node object where it is a node, and comment object where it is a comment and add to 2 arrays

				////dsm($group_refine);
				if(!empty($digest_array)){

				$node_obj = array();
				$comment_obj = array();
				foreach($digest_array as $key3 => $value3){
					if($value3['nid']){
					$node_obj[$value3['nid']] = node_load(array('nid' => $value3['nid']));
					
					//dsm($node_obj);
					}elseif($value3['cid']){
					$comment_obj[$value3['cid']] = _comment_load($value3['cid']);

					//dsm($comment_obj);
					}


				}
				$value3 = array();
				$remaining_comments = array();
				$message_body = '';
				$message_body .= '<p>The following are the titles of messages to groups from which you chose to receive emails in a digest, once per week:</p>';
				$nid_array = array();
				$node_data = array();
				$comment_data = array();
				foreach($node_obj as $node_data){
					$nid_array[] = $node_data->nid;
					////print_r($node_data->nid);
					foreach($node_data->og_groups_both as $key3 => $value3){
					}
					$message_body .= '<p>Message title: '. $node_data->title . ' posted to: ' . $value3 . ' by: ' .	user_load(array('uid' => $node_data->uid))->realname . '</p>';
					$message_body .= '<p>Read more, reply, and download attachments at: http://localfoodsystems.org/node/'. $node_data->nid . '</p>';
		
						foreach($comment_obj as $comment_data){

							if($node_data->nid == $comment_data->nid){ 
							$message_body .= '<p>Comment on: ' .node_load(array('nid' => $comment_data->nid))->title. ' posted by: ' .user_load(array('uid' => $comment_data->uid))->realname. '</p>';
							$message_body .= '<p>Read more reply, and download attachments at: http://localfoodsystems.org/node/'. $comment_data->nid . '#comment-' .$comment_data->cid . '</p>';
							db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$comment_data->cid,$setting_uid['uid']);
							db_query('INSERT INTO {noti_sent} (cid,uid) VALUES (%d,%d)',$comment_data->cid,$setting_uid['uid']);

							}

							
						}

				 	db_query('DELETE FROM {noti_digest_cue} WHERE nid = %d AND uid = %d',$node_data->nid,$setting_uid['uid']);
					db_query('INSERT INTO {noti_sent} (nid,uid) VALUES (%d,%d)',$node_data->nid,$setting_uid['uid']);
				        				     	
				

				}
						$comment_data2 = array();
						foreach($comment_obj as $comment_data2){
							////print_r($nid_array);
							////print_r($comment_data2->nid);
							//dsm($comment_data2);
							if(!in_array($comment_data2->nid,$nid_array)){ 
							
							$message_body .= '<p>Comment on: ' .node_load(array('nid' => $comment_data2->nid))->title. ' posted by: ' .user_load(array('uid' => $comment_data2->uid))->realname. '</p>';
							$message_body .= '<p>Read more reply, and download attachments at: http://localfoodsystems.org/node/'. $comment_data2->nid . '#comment-' .$comment_data2->cid . '</p>';

							db_query('DELETE FROM {noti_digest_cue} WHERE cid = %d AND uid = %d',$comment_data2->cid,$setting_uid['uid']);
							db_query('INSERT INTO {noti_sent} (cid,uid) VALUES (%d,%d)',$comment_data2->cid,$setting_uid['uid']);

							}
						}
					


				$message_body .= '<p>To change the frequency of these emailed digests or to specify the groups from which you want messages, please visit your account: http://localfoodsystems.org/user/'.$setting_uid['uid'].'/notify </p>';
				      //}//end if(in_array($setting['uid'],noti_get_all_subscribers($key3))

				noti_send('digest',$message_subject = 'Weekly Digest Notifications from Local Food Systems',$message_body,$email);
			//build message here for hourly
			
			}else{

			drupal_set_message('Nothing to do');
			}
			}//closing brace if not empty $digest_array
		$message_body = '';
		}
		break;







		}
}
// --------------------------------------------------------------- 
// END REDO DIGEST MESSAGE PROCESS
// --------------------------------------------------------------- 

// --------------------------------------------------------------- 
// end message processing functions
// --------------------------------------------------------------- 

// --------------------------------------------------------------- 
// start email sending functions
// --------------------------------------------------------------- 
function noti_send($op, $message_subject, $message_body,$email){
	////dsm($message_body);
	switch($op){
		case individual:
			$params['message_subject'] = $message_subject;
			$params['message_body'] = $message_body;
			drupal_mail('noti', 'post_submitted_immediate',
				variable_get('admin@localfoodsystems.org',$email), language_default(), $params);
			break;
		case digest: 

			$params['message_subject'] = $message_subject;
			$params['message_body'] = $message_body;

			drupal_mail('noti', 'post_submitted_digest',
				variable_get('admin@localfoodsystems.org',$email), language_default(), $params);
			break;
	}
}

function noti_mail($key, &$message, $params) {
	$language = $message['language'];
	switch($key) {
		case 'post_submitted_immediate':
			// create an array of variables from the parameters argument
			// define subject and body
			$message['subject'] = drupal_html_to_text($params['message_subject']);;
			$message['body'] [] = drupal_html_to_text($params['message_body']);
			break;
		case 'post_submitted_digest':
			// create an array of variables from the parameters argument
			// define subject and body
			$message['subject'] = drupal_html_to_text($params['message_subject']);;
			$message['body'][] = drupal_html_to_text($params['message_body']);
			break;
	}
}

