<?php

if (defined('MAINTENANCE_MODE')) {
  // We have to make sure that we get the Hooks-class as the update-process
  // will run into problems otherwise.
  require_once('includes/OAuthCommonHooks.inc');
}

/**
 * Implementation hook_autoload_info().
 */
function oauth_common_autoload_info() {
  $lib = array('file' => 'lib/OAuth.php');

  return array(
    'DrupalOAuthServer'         => array('file' => 'includes/DrupalOAuthServer.inc'),
    'DrupalOAuthDataStore'      => array('file' => 'includes/DrupalOAuthDataStore.inc'),
    'DrupalOAuthRequest'        => array('file' => 'includes/DrupalOAuthRequest.inc'),
    'DrupalOAuthToken'          => array('file' => 'includes/DrupalOAuthToken.inc'),
    'DrupalOAuthConsumerToken'  => array('file' => 'includes/DrupalOAuthConsumerToken.inc'),
    'DrupalOAuthConsumer'       => array('file' => 'includes/DrupalOAuthConsumer.inc'),
    'OAuthSignatureMethod_HMAC' => array('file' => 'includes/OAuthSignatureMethod_HMAC.inc'),
    'OAuthCommonHooks'          => array('file' => 'includes/OAuthCommonHooks.inc'),
    'DrupalOAuthClient'         => array('file' => 'includes/DrupalOAuthClient.inc'),
    'OAuthServer'     => $lib,
    'OAuthDataStore'  => $lib,
    'OAuthRequest'    => $lib,
    'OAuthConsumer'   => $lib,
    'OAuthToken'      => $lib,
  );
}

/**
 * Implementation of hook_perm().
 */
function oauth_common_perm() {
  return array('oauth authorize consumers', 'oauth register consumers', 'administer oauth');
}

/**
 * Implementation of hook_menu().
 */
function oauth_common_menu() {
  return OAuthCommonHooks::menu();
}

/**
 * Implementation of hook_cron().
 */
function oauth_common_cron() {
  return OAuthCommonHooks::cron();
}

/**
 * Implementation of hook_user().
 */
function oauth_common_user($op, &$edit, &$account, $category = NULL) {
  return OAuthCommonHooks::user($op, $edit, $account, $category);
}

/**
 * Implementation of hook_xrds().
 */
function services_oauth_xrds() {
  return OAuthCommonHooks::xrds();
}

/**
 * Access callback function used by several menu items.
 *
 * @param stdClass $user
 *  A user object.
 * @param string $permission 
 *  The permission that is needed in addition to edit access on the $user.
 */
function _oauth_common_user_access($user, $permission) {
  return user_edit_access($user) && user_access($permission);
}

/**
 * This function is used as a access callback
 * when the authentication of the request shouldn't be
 * done by the menu system.
 *
 * @return bool
 *  Always returns TRUE
 */
function _oauth_common_always_true() {
  return TRUE;
}

/**
 * Returns the authorization levels as an associative array
 * keyed after the machine readable name.
 *
 * @return array
 */
function oauth_common_authorization_levels() {
  global $levels;
  if (!$levels) {
    $levels = array();
    $res = db_query("SELECT * FROM {oauth_authorization_levels}");
    while ($level = db_fetch_object($res)) {
      $levels[$level->name] = $level;
    }
  }
  return $levels;
}

/**
 * Creates a new authorization level
 *
 * @param string $name
 *  The machine-readable name of the authorization level
 * @param string $title
 *  The human-readable name of the authentication level
 * @param string $description
 *  The description of the authentication level
 * @return void
 */
function oauth_common_write_authorization_level($name, $title, $description) {
  $levels = oauth_common_authorization_levels();
  $update = NULL;
  if (isset($levels[$name])) {
    $update = array('name');
  }
  drupal_write_record('oauth_authorization_levels', $values = array(
    'name' => $name,
    'title' => $title,
    'description' => $description,
  ), $update);
}

/**
 * Deletes a authorization level
 *
 * @param string $name
 *  The machine-readable name of the authorization level
 * @return void
 */
function oauth_common_delete_authorization_level($name) {
  db_query("DELETE FROM {oauth_authorization_levels} WHERE name='%s'", array(
    ':name' => $name,
  ));
}